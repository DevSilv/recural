M(0) = 0

1 disk:		Move 1 disk from src to dst (whatever pegs they actually refer to) (1 move)

			Total number of moves M(1) = 1 = 2*M(0) + 1 = 2^1 - 1

2 disks:	Move n disks from first to last
				Move n - 1 disks from first to tmp
					Invoke procedure for 1 disk, setting src=first and dst=tmp (1 move)
				Move 1 disk from first to last
					Invoke procedure for 1 disk, setting src=first and dst=last (1 move)
				Move n - 1 disks from tmp to last
					Invoke procedure for 1 disk, setting src=tmp and dst=last (1 move)

			Total number of moves M(2) = 1 + 1 + 1 = 3 = 2*M(1) + 1 = 2^2 - 1

3 disks:	Move n disks from first to last
				Move n - 1 disks from first to tmp
					Invoke procedure for 2 disks, setting src=first and dst=tmp (3 moves)
				Move 1 disk from first to last
					Invoke procedure for 1 disk, setting src=first and dst=last (1 moves)
				Move n - 1 disks from tmp to last
					Invoke procedure for 2 disks, setting src=tmp and dst=last (3 moves)

			Total number of moves M(3) = 3 + 1 + 3 = 7 = 2*M(2) + 1 = 2^3 - 1

4 disks:	Move n disks from first to last
				Move n - 1 disks from first to tmp
					Invoke procedure for 3 disks, setting src=first and dst=tmp (7 moves)
				Move 1 disk from first to last
					Invoke procedure for 1 disk, setting src=first and dst=last (1 move)
				Move n - 1 disks from tmp to last
					Invoke procedure for 3 disks, setting src=tmp and dst=last (7 moves)

			Total number of moves M(4) = 5 + 1 + 5 = 15 =2*M(3) + 1 + 1 = 2^4 - 1

Etc.

Now: the parameter n is for the function to know which procedure to invoke.

Doubt: How otherwise might the function know which procedure to invoke? Is there any way?

Insight: Maybe the number of disks on particular rods would suffice.

Hypothesis: function invokations could look like this:
	toh(1 disk)
		move 1 disk from... (mutate global state)
	
	toh(2 disks)
		toh(1 disk)
		toh(1 disk)
		toh(1 disk)
	
	toh(3 disks)
		toh(2 disks)
		toh(1 disk)
		toh(2 disks)
	
	toh(4 disks)
		toh(3 disks)
		toh(1 disk)
		toh(3 disks)
	
	Etc.

Or, returning state instead of mutating the global one:
	toh(1, state(first, tmp, last))
		return new state(new contents, order as in invokation)
	
	toh(2, state(first, tmp, last))
		// You may change the contents of the pegs,
		//	but you need to return them to me in the same order that I have them
		state(first, tmp, last) <- toh(1, state(first, last, tmp))
		// You may change the contents of the pegs,
		//	but you need to return them to me in the same order that I have them
		state(first, tmp, last) <- toh(1, state(first, tmp, last))
		// You may change the contents of the pegs,
		//	but you need to return them to me in the same order that I have them
		state(first, tmp, last) <- toh(1, state(tmp, first, last))
		return state(first, tmp, last)

	toh(3, state(first, tmp, last))
		state(first, tmp, last) <- toh(2, state(first, last, tmp))
		state(first, tmp, last) <- toh(1, state(first, tmp, last))
		state(first, tmp, last) <- toh(2, state(tmp, first, last))
		return state(first, tmp, last)

	toh(4, state(first, tmp, last))
		state(first, tmp, last) <- toh(3, state(first, last, tmp)) // You need to know which of toh(3, ...) returned pegs is your first, which tmp, and which last
		state(first, tmp, last) <- toh(1, state(first, tmp, last))
		state(first, tmp, last) <- toh(3, state(tmp, first, last))
		return state(first, tmp, last)
	
	Etc.

Or, adding the information about pegs:
	toh(1, state of (first, tmp, last))
		return new state of (first with 1 disk removed, tmp, last with one disk added) // state after 1 move
	
	toh(2, state of (first, tmp, last))
		state <- toh(1, new state of (first, last, tmp)) // Swap tmp and last
		state <- toh(1, new state of (first, tmp, last)) // Do not swap anything
		state <- toh(1, new state of (tmp, first, last)) // Swap first and tmp
		return state

	toh(3, state of (first, tmp, last))
		state <- toh(2, new state of (first, last, tmp)) // Swap tmp and last
		state <- toh(1, state) // Do not swap anything
		state <- toh(2, new state of (tmp, first, last)) // Swap first and tmp
		return state

	toh(4, state of (first, tmp, last))
		new state <- toh(3, new state of (first, last, tmp)) // Swap tmp and last
		new state <- toh(1, state of toh(4, ...)) // Do not swap anything
		new state <- toh(3, new state of (tmp, first, last)) // Swap first and tmp
		return state
	
	Etc.

So, invokations for toh(4) probably would be as follows... (certainly there is at least a couple of mistakes below)

Key:
	- Lines with invokations and with UIF: invokations of the first recursive invokation (toh(4), toh(3), toh(2)) (there needs to exist the same invariant for all of them)
	- Lines with invokations and without UIF (i.e., all other lines): invokations of the invokation of toh(1) (there needs to exist the same invariant for all of them, different from the one for invokations of toh(2), toh(3) and toh(4))
	- Lines with {n}S: the state to reorder pegs is taken from of the last ivokation toh({n}, ...)

UIF		toh(4, A=first, B=tmp, C=last)
UIF	4S		toh(3, A=first, B=last, C=tmp) // Swapped B and C according to invoking toh(4)
UIF	3S			toh(2, A=first, B=tmp, C=last) // Swapped B and C according to invoking toh(3)
	2S				toh(1, A=first, B=last, C=tmp) // Swapped B and C according to invoking toh(2)
						Move a disk from A to C // Now it is: from first to tmp
					toh(1, A=first, B=tmp, C=last) // The same order as in invoking toh(2)
						Move a disk from A to C // Now it is: from first to last
	2S				toh(1, A=tmp, B=first, C=last) // Swapped A and B according to invoking toh(2)
						Move a disk from A to C // Now it is: from tmp to last
				toh(1, A=first, B=last, C=tmp) // The same order as in invoking toh(3)
					Move a disk from A to C // Now it is: from first to tmp
UIF	3S			toh(2, A=last, B=first, C=tmp) // Swapped A and B according to invoking toh(3)
	2S				toh(1, A=last, B=tmp, C=first) // Swapped B and C according to invoking toh(2)
						Move a disk from A to C // Now it is: from last to first
					toh(1, A=last, B=first, C=tmp) // The same order as in invoking toh(2)
						Move a disk from A to C // Now it is: from last to tmp
	2S				toh(1, A=first, B=last, C=tmp) // Swapped A and B according to invoking toh(2)
						Move a disk from A to C // Now it is: from first to tmp
			toh(1, A=first, B=tmp, C=last)
				Move a disk from A to C // Now it is: from first to last // Digression: wait... could it be that we swapped the pegs in the first invokation? Will we then need swapping in the first recursive invokation or not? Maybe not? Maybe it will require swapping also in the second recursive invokation... but which two?
UIF	4S		toh(3, A=tmp, B=first, C=last) // Swapped A and B according to invoking toh(4)
UIF	3S			toh(2, A=tmp, B=last, C=first) // Swapped B and C according to invoking toh(3)
	2S				toh(1, A=tmp, B=first, C=last) // Swapped B and C according to invoking toh(2)
						Move a disk from A to C // Now it is: from tmp to last
					toh(1, A=tmp, B=last, C=first) // The same order as in invoking toh(2)
						Move a disk from A to C // Now it is: from tmp to first
	2S				toh(1, A=last, B=tmp, C=first) // Swapped A and B according to invoking toh(2)
						Move a disk from A to C // Now it is: from last to first
				toh(1, A=tmp, B=first, C=last) // The same order as in invoking toh(3)
					Move a disk from A to C // Now it is: from tmp to last
UIF	3S			toh(2, A=first, B=tmp, C=last) // Swapped A and B according to invoking toh(3)
	2S				toh(1, A=first, B=last, C=tmp) // Swapped B and C according to invoking toh(2)
						Move a disk from A to C // Now it is: from first to tmp
					toh(1, A=first, B=tmp, C=last) // The same order as in invoking toh(2)
						Move a disk from A to C // Now it is: from first to last
	2S				toh(1, A=tmp, B=first, C=last) // Swapped A and B according to invoking toh(2)
						Move a disk from A to C // Now it is: from tmp to last

Well, the only invariant common to all of them that I can imagine is the number n. That is, for each invokation, it is/could be/would be made with n as the first argument. But... maybe, maybe, there is a way to avoid it?...



4	Move 3 disks from A to B
	Move 1 disk from A to C
	Move 3 disks from B to C

3	Move 2 disks from A to C
	Move 1 disk from from A to B
	Move 2 disks from C to B

2	Move 1 disk from A to B
	Move 1 disk from A to C
	Move 1 disk from B to C

1	Move 1 disk from A to C








Disk 4th's perspective:
	need to move all disks above me to B, then I go to C,
	then they could move back above me

   _|_        |         |		^^| 3d A->B
  __|__       |         |		  |
 ___|___      |         |		  |
-------------------------------------------
____|____     |         |		^^| 1d A->C
    |         |         |		
========= ========= =========
    A         B         C

Disk 3rd's perspective:
	need to move all disks above me to C, then I go to B,
	then they could move back above me

   _|_        |         |		^^| 2d A->C
  __|__       |         |		  |
-------------------------------------------
 ___|___      |         |		^^| 1d A->B
____|____     |         |
    |         |         |		
========= ========= =========
    A         B         C

Disk 2nd's perspective:
	need to move all disks above me to B, then I go to C,
	then they could move back above me

   _|_        |         |		^^| 1d A->B
-------------------------------------------
  __|__       |         |		^^|	1d A->C
 ___|___      |         |
____|____     |         |
    |         |         |		
========= ========= =========
    A         B         C

Disk 1st's perspective:
	I can go to B directly (in fact, I can go everywhere according to the rules)